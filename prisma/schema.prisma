generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model RobotType {
  name           String          @id @unique
  machineRepairs MachineRepair[] @relation("MachineRepairRobotType")
}

model MachineRepair {
  id                    Int                          @id @default(autoincrement())
  first_name            String
  last_name             String
  phone                 String
  email                 String
  repair_or_maintenance String
  robot_code            String?
  fault_description     String
  client_signature      String
  createdAt             DateTime                     @default(now())
  bucket_name           String
  address               String
  state                 String?
  image_path_list       String[]
  repairer_name         String?
  warranty              Boolean?
  brand_name            String?
  remark                String?
  devis                 Boolean                      @default(false)
  start_timer           DateTime?
  working_time_in_sec   Int                          @default(0)
  city                  String?
  postal_code           String?
  machine_type_name     String?
  client_call_times     DateTime[]
  hivernage             Boolean                      @default(false)
  robot_type_name       String?
  brand_id              Brand?                       @relation("MachineRepairBrand", fields: [brand_name], references: [name])
  machine_type_id       MachineType?                 @relation("MachineRepairMachineType", fields: [machine_type_name], references: [name])
  repairer_id           Repairer?                    @relation("MachineRepairRepairer", fields: [repairer_name], references: [name])
  robot_type_id         RobotType?                   @relation("MachineRepairRobotType", fields: [robot_type_name], references: [name])
  replaced_part_list    MachineRepairReplacedParts[]
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      Role     @default(OPERATOR)
  createdAt DateTime @default(now())
}

model ReplacedParts {
  name           String                       @id @unique
  price          Float                        @default(0)
  machineRepairs MachineRepairReplacedParts[]
}

model Repairer {
  name           String          @id @unique
  machineRepairs MachineRepair[] @relation("MachineRepairRepairer")
}

model Brand {
  name           String          @id @unique
  machineRepairs MachineRepair[] @relation("MachineRepairBrand")
}

model MachineType {
  name           String          @id @unique
  machineRepairs MachineRepair[] @relation("MachineRepairMachineType")
}

model Config {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
}

model MachineRepairReplacedParts {
  machineRepairId  Int
  replacedPartName String
  quantity         Int
  machineRepair    MachineRepair @relation(fields: [machineRepairId], references: [id], onDelete: Cascade)
  replacedPart     ReplacedParts @relation(fields: [replacedPartName], references: [name], onDelete: Cascade)

  @@id([machineRepairId, replacedPartName])
}

model MachineRented {
  id                           Int                  @id @default(autoincrement())
  name                         String
  maintenance_type             MaintenanceType
  nb_day_before_maintenance    Int?
  nb_rental_before_maintenance Int?
  eventId                      String?
  bucket_name                  String?
  image_path                   String?
  price_per_day                Float                @default(0)
  guests                       String[]             @default([])
  machineRentals               MachineRental[]
  parts                        MachineRentedPart[]
  maintenanceHistories         MaintenanceHistory[]
}

model MachineRental {
  id              Int           @id @default(autoincrement())
  machineRentedId Int
  rentalDate      DateTime
  returnDate      DateTime?
  clientAddress   String        @default("")
  clientCity      String        @default("")
  clientEmail     String        @default("")
  clientFirstName String        @default("")
  clientLastName  String        @default("")
  clientPhone     String        @default("")
  clientPostal    String        @default("")
  paid            Boolean       @default(false)
  guests          String[]      @default([])
  eventId         String
  machineRented   MachineRented @relation(fields: [machineRentedId], references: [id], onDelete: Cascade)
}

model MachineRentedPart {
  machineRentedId Int
  id              Int           @id @default(autoincrement())
  partName        String
  machineRented   MachineRented @relation(fields: [machineRentedId], references: [id], onDelete: Cascade)
}

model MaintenanceHistory {
  id              Int           @id @default(autoincrement())
  machineRentedId Int
  performedAt     DateTime      @default(now())
  notes           String?
  machineRented   MachineRented @relation(fields: [machineRentedId], references: [id])
}

view MachineRentedWithNextMaintenance {
  id                           Int              @unique
  name                         String?
  maintenance_type             MaintenanceType?
  nb_day_before_maintenance    Int?
  nb_rental_before_maintenance Int?
  last_maintenance_date        DateTime?        @db.Timestamp(6)
  eventId                      String?
  bucket_name                  String?
  image_path                   String?
  price_per_day                Float?
  guests                       String[]
  next_maintenance             DateTime?        @db.Timestamp(6)
}

enum Role {
  OPERATOR
  SUPERVISOR
  ADMIN
  RENTAL_MANAGER
}

enum MaintenanceType {
  BY_DAY
  BY_NB_RENTAL
}

// command to add migration:
// npx prisma migrate dev --name xxxxxxxx
