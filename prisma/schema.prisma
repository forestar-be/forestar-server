generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model RobotType {
  name           String          @id @unique
  machineRepairs MachineRepair[] @relation("MachineRepairRobotType")
}

model MachineRepair {
  id                    Int                          @id @default(autoincrement())
  first_name            String
  last_name             String
  phone                 String
  email                 String
  repair_or_maintenance String
  robot_code            String?
  fault_description     String
  client_signature      String
  createdAt             DateTime                     @default(now())
  bucket_name           String
  address               String
  state                 String?
  image_path_list       String[]
  repairer_name         String?
  warranty              Boolean?
  brand_name            String?
  remark                String?
  devis                 Boolean                      @default(false)
  start_timer           DateTime?
  working_time_in_sec   Int                          @default(0)
  city                  String?
  postal_code           String?
  machine_type_name     String?
  client_call_times     DateTime[]
  hivernage             Boolean                      @default(false)
  robot_type_name       String?
  brand_id              Brand?                       @relation("MachineRepairBrand", fields: [brand_name], references: [name])
  machine_type_id       MachineType?                 @relation("MachineRepairMachineType", fields: [machine_type_name], references: [name])
  repairer_id           Repairer?                    @relation("MachineRepairRepairer", fields: [repairer_name], references: [name])
  robot_type_id         RobotType?                   @relation("MachineRepairRobotType", fields: [robot_type_name], references: [name])
  replaced_part_list    MachineRepairReplacedParts[]
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      Role     @default(OPERATOR)
  createdAt DateTime @default(now())
}

model ReplacedParts {
  name           String                       @id @unique
  price          Float                        @default(0)
  machineRepairs MachineRepairReplacedParts[]
}

model Repairer {
  name           String          @id @unique
  machineRepairs MachineRepair[] @relation("MachineRepairRepairer")
}

model Brand {
  name           String          @id @unique
  machineRepairs MachineRepair[] @relation("MachineRepairBrand")
}

model MachineType {
  name           String          @id @unique
  machineRepairs MachineRepair[] @relation("MachineRepairMachineType")
}

model Config {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
}

model MachineRepairReplacedParts {
  machineRepairId  Int
  replacedPartName String
  quantity         Int
  machineRepair    MachineRepair @relation(fields: [machineRepairId], references: [id], onDelete: Cascade)
  replacedPart     ReplacedParts @relation(fields: [replacedPartName], references: [name], onDelete: Cascade)

  @@id([machineRepairId, replacedPartName])
}

model MachineRented {
  id                           Int                  @id @default(autoincrement())
  name                         String
  maintenance_type             MaintenanceType
  nb_day_before_maintenance    Int?
  nb_rental_before_maintenance Int?
  eventId                      String?
  bucket_name                  String?
  image_path                   String?
  price_per_day                Float                @default(0)
  guests                       String[]             @default([])
  deposit                      Float                @default(0)
  operatingHours               Float?               // Added: Operating hours counter
  fuelLevel                    Float?               @default(0) // Added: 0-100 percent
  lastMeasurementUpdate        DateTime?            // Added: When measurements were last updated
  lastMeasurementUser          String?              // Added: User who performed the measurement update
  machineRentals               MachineRental[]
  parts                        MachineRentedPart[]
  maintenanceHistories         MaintenanceHistory[]
}

model MachineRental {
  id                    Int           @id @default(autoincrement())
  machineRentedId       Int
  rentalDate            DateTime
  returnDate            DateTime?
  clientAddress         String        @default("")
  clientCity            String        @default("")
  clientEmail           String        @default("")
  clientFirstName       String        @default("")
  clientLastName        String        @default("")
  clientPhone           String        @default("")
  clientPostal          String        @default("")
  paid                  Boolean       @default(false)
  guests                String[]      @default([])
  eventId               String
  with_shipping         Boolean       @default(false)
  depositToPay          Boolean       @default(false)
  finalTermsPdfId       String?
  createdAt             DateTime      @default(now())
  machineRented         MachineRented @relation(fields: [machineRentedId], references: [id], onDelete: Cascade)
}

model MachineRentedPart {
  machineRentedId Int
  id              Int           @id @default(autoincrement())
  partName        String
  machineRented   MachineRented @relation(fields: [machineRentedId], references: [id], onDelete: Cascade)
}

model MaintenanceHistory {
  id              Int           @id @default(autoincrement())
  machineRentedId Int
  performedAt     DateTime      @default(now())
  notes           String?
  machineRented   MachineRented @relation(fields: [machineRentedId], references: [id])
}

model ConfigRentalManagement {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
}

model PhoneCallback {
  id              Int      @id @default(autoincrement())
  phoneNumber     String
  clientName      String
  reason          String
  description     String
  responsiblePerson String
  createdAt       DateTime @default(now())
  eventId         String? 
  completed       Boolean  @default(false)
}

model RobotInventory {
  id            Int      @id @default(autoincrement())
  reference     String? 
  name          String 
  category      InventoryCategory @default(ROBOT)
  sellingPrice  Float?  
  purchasePrice Float?  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  inventoryPlans InventoryPlan[]
  purchaseOrders PurchaseOrder[] @relation("RobotToPurchaseOrder")
  purchaseOrdersAsPlugin PurchaseOrder[] @relation("PluginToPurchaseOrder")
  purchaseOrdersAsAntenna PurchaseOrder[] @relation("AntennaToPurchaseOrder")
  purchaseOrdersAsShelter PurchaseOrder[] @relation("ShelterToPurchaseOrder")
}

model InventoryPlan {
  id             Int      @id @default(autoincrement())
  robotInventory RobotInventory @relation(fields: [robotInventoryId], references: [id], onDelete: Cascade)
  robotInventoryId Int
  year           Int      
  quantity       Int      
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([robotInventoryId, year])
}

model PurchaseOrder {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Client information
  clientFirstName  String
  clientLastName   String
  clientAddress    String
  clientCity       String
  clientPhone      String
  deposit          Float    @default(0)
  
  // Robot details
  robotInventoryId Int
  robotInventory   RobotInventory @relation("RobotToPurchaseOrder", fields: [robotInventoryId], references: [id])
  serialNumber     String?
  
  // Accessories
  pluginInventoryId Int?
  antennaInventoryId Int?
  shelterInventoryId Int?
  plugin           RobotInventory? @relation("PluginToPurchaseOrder", fields: [pluginInventoryId], references: [id])
  antenna          RobotInventory? @relation("AntennaToPurchaseOrder", fields: [antennaInventoryId], references: [id])
  shelter          RobotInventory? @relation("ShelterToPurchaseOrder", fields: [shelterInventoryId], references: [id])
  hasWire          Boolean   @default(false)
  wireLength       Int?
  hasAntennaSupport Boolean  @default(false)
  hasPlacement     Boolean   @default(false)
  
  // Installation
  installationDate DateTime?
  needsInstaller   Boolean   @default(false)
  installationNotes String?
  
  // Status fields
  hasAppointment   Boolean   @default(false)
  isInstalled      Boolean   @default(false)
  isInvoiced       Boolean   @default(false)
  devis            Boolean   @default(false)
  
  // Devis specific fields
  validUntil       DateTime?
  bankAccountNumber String?
  
  // Files
  orderPdfId       String?
  invoicePath      String?
  photosPaths      String[]  @default([])
  
  // Signature fields
  clientSignature  String?
  signatureTimestamp DateTime?

  eventId          String?   // For calendar integration
}

view MachineRentedView {
  id                           Int              @unique
  name                         String?
  maintenance_type             MaintenanceType?
  nb_day_before_maintenance    Int?
  nb_rental_before_maintenance Int?
  last_maintenance_date        DateTime?        @db.Timestamp(6)
  eventId                      String?
  bucket_name                  String?
  image_path                   String?
  price_per_day                Float?
  guests                       String[]
  deposit                      Float?
  next_maintenance             DateTime?        @db.Timestamp(6)
  forbiddenRentalDays          DateTime[]       @db.Date
  operatingHours               Float?
  fuelLevel                    Float?
  lastMeasurementUpdate        DateTime?        @db.Timestamp(6)
  lastMeasurementUser          String?
}

view MachineRentalView {
  id              Int       @unique
  machineRentedId Int
  rentalDate      DateTime
  returnDate      DateTime?
  clientAddress   String
  clientCity      String
  clientEmail     String
  clientFirstName String
  clientLastName  String
  clientPhone     String
  clientPostal    String
  paid            Boolean
  guests          String[]
  eventId         String
  with_shipping   Boolean
  depositToPay    Boolean?
  finalTermsPdfId String?
  createdAt       DateTime @db.Timestamp(6) 
}

model RentalTerms {
  id        Int             @id @default(autoincrement())
  content   String
  type      RentalTermType
  order     Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model InstallationPreparationText {
  id        Int                   @id @default(autoincrement())
  content   String
  type      InstallationTextType
  order     Int
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}

enum Role {
  OPERATOR
  SUPERVISOR
  ADMIN
  RENTAL_MANAGER
  RENTAL_OPERATOR
}

enum MaintenanceType {
  BY_DAY
  BY_NB_RENTAL
}

enum RentalTermType {
  TITLE
  SUBTITLE
  SUBTITLE2
  PARAGRAPH
}

enum InventoryCategory {
  ROBOT
  ANTENNA
  PLUGIN
  SHELTER
}

enum InstallationTextType {
  TITLE
  SUBTITLE
  SUBTITLE2
  PARAGRAPH
}
